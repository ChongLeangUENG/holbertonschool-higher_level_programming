>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

>>> matrix_divided = ([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Division matrix by 0:
>>> matrix_divided = ([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Division matrix by a float number:
>>> matrix_divided = ([[10, 20, 30], [23, 49, 67], [-5, -9.77, 0]], 5.4)
[[1.85, 3.7, 5.56], [4.26, 9.07, 12.41], [-0.93, -1.81, 0.0]]

Passing a matrix is tuple:
>>> matrix_divided = ((3, 6, 9), 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix is not same size:
>>> matrix_divided = ([[3, 6, 9], [1, 2, 79, 23, 60], [100]], 10)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

Matix has mixed with alphabet:
>>> matrix_divided = ([[3, 6, 'stop'], [1, 2, 'start'], [100, 'hello', 10]], 10)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

If div is a list:
>>> matrix_divided = ([[3, 6, 9], [42, 57, 69]], [3])
Traceback (most recent call last):
...
TypeError: div must be a number

Case dont have div:
>>> matrix_divided = ([[3, 6, 9], [42, 57, 69]],)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
